#!/usr/bin/env node

const fs = require('fs');

if (!fs.existsSync('.bpmnlintrc')) {
  console.error(`
Cannot not find local .bpmnlintrc file, please create one:

  npx bpmnlint --init

Refer to https://github.com/bpmn-io/bpmnlint#configuration for details.
`);

  process.exit(1);
}

const argv = process.argv.slice(2);

const [ arg ] = argv;

if (arg === '--help') {
  console.log('usage: bpmnlint-playground [diagram]');

  process.exit(0);
}

if (arg) {

  if (!fs.existsSync(arg)) {
    console.error(`diagram ${arg} does not exist`);

    process.exit(1);
  }
}


async function run(diagram) {
  const path = require('path');

  const rollup = require('rollup');
  const loadRollupConfig = require('rollup/dist/loadConfigFile');

  const exitHook = require('exit-hook');

  const rollupConfig = path.join(__dirname, '..', 'config', 'rollup.run-config.js');

  // share diagram with app
  process.env.BPMNLINT_PLAYGROUND_OPEN_DIAGRAM = diagram;

  const {
    options,
    warnings
  } = await loadRollupConfig(rollupConfig, { format: 'es' });

  // log all found warnings
  warnings.flush();

  // create watcher
  const watcher = rollup.watch(options.map(options => ({
    ...options,
    onwarn(warning) {
      warnings.add(warning);
    }
  })));

  watcher.on('event', event => {

    const {
      result,
      code
    } = event;

    if (result) {
      result.close();
    }

    if (code === 'END') {
      warnings.flush();
    }
  });

  exitHook(() => {
    watcher.close();
  });
}

run(arg).catch(err => {
  console.error('failed to start bpmnlint-playground', err);

  process.exit(1);
});
